buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {

        classpath "io.franzbecker:gradle-lombok:4.0.0"
    }
}
plugins {
    id 'java-library'
}
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "de.marcphilipp.nexus-publish"
apply plugin: 'io.franzbecker.gradle-lombok'

task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask) {
    def outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    for (srcDir in project.sourceSets.main.java.srcDirs) {
        inputs.dir(srcDir)
        args(srcDir, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

task sourceJar(type: Jar) {
    archiveClassifier.set("sources")
    from delombok
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}



nexusPublishing {
    clientTimeout = java.time.Duration.ofMinutes(7)
    repositories {
        sonatype()
    }

}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'grpc-spring-boot-starter'
                description = 'grpc-spring-boot-starter'
                url = 'https://github.com/LogNet/grpc-spring-boot-starter'

                scm {
                    url = 'https://github.com/LogNet/grpc-spring-boot-starter'
                    connection = 'scm:https://LogNet@github.com/LogNet/grpc-spring-boot-starter.git'
                    developerConnection = 'scm:git://github.com/LogNet/grpc-spring-boot-starter.git'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'jvmlet'
                        name = 'Furer Alexander'
                        email = 'furer.alexander@gmail.com'
                    }
                }

            }

            from components.java


            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }
}

signing {
    required = { !version.toString().endsWith('-SNAPSHOT') && gradle.taskGraph.hasTask("publishToSonatype") }
    sign publishing.publications
}


dependencies {
    api "io.grpc:grpc-api:${grpcVersion}"
}
compileJava.dependsOn(processResources)

jar {
    enabled = true
    archiveClassifier.convention("")
}
